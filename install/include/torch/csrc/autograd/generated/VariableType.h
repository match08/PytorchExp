#pragma once

// @generated from tools/autograd/templates/VariableType.h

#include <ATen/ATen.h>

#include <c10/util/intrusive_ptr.h>

#include <torch/csrc/WindowsTorchApiMacro.h>

#include <cstdint> // for size_t
#include <functional> // for function
#include <memory> // for unique_ptr
#include <string>
#include <vector>

namespace at {
  struct Quantizer;
};

namespace torch { namespace autograd {

struct Variable;
using at::Context;
using at::Device;
#ifdef BUILD_NAMEDTENSOR
using at::Dimname;
using at::DimnameList;
#endif
using at::Generator;
using at::IntArrayRef;
using at::MemoryFormat;
using at::QScheme;
using at::Scalar;
using at::ScalarType;
using at::Storage;
using at::Tensor;
using at::TensorList;
using at::TensorOptions;
using at::Quantizer;
// This is temporary typedef to enable Quantizer in aten native function API
// we'll remove them when we are actually exposing Quantizer class
// to frontend
using ConstQuantizerPtr = const c10::intrusive_ptr<Quantizer>&;
using c10::optional;

struct TORCH_API VariableType final {
  static std::vector<at::DeprecatedTypeProperties*> allCUDATypes();
  static std::vector<at::DeprecatedTypeProperties*> allCPUTypes();

  static Tensor __and__(const Tensor & self, Scalar other) ;
  static Tensor __and__(const Tensor & self, const Tensor & other) ;
  static Tensor & __iand__(Tensor & self, Scalar other) ;
  static Tensor & __iand__(Tensor & self, const Tensor & other) ;
  static Tensor & __ilshift__(Tensor & self, Scalar other) ;
  static Tensor & __ilshift__(Tensor & self, const Tensor & other) ;
  static Tensor & __ior__(Tensor & self, Scalar other) ;
  static Tensor & __ior__(Tensor & self, const Tensor & other) ;
  static Tensor & __irshift__(Tensor & self, Scalar other) ;
  static Tensor & __irshift__(Tensor & self, const Tensor & other) ;
  static Tensor & __ixor__(Tensor & self, Scalar other) ;
  static Tensor & __ixor__(Tensor & self, const Tensor & other) ;
  static Tensor __lshift__(const Tensor & self, Scalar other) ;
  static Tensor __lshift__(const Tensor & self, const Tensor & other) ;
  static Tensor __or__(const Tensor & self, Scalar other) ;
  static Tensor __or__(const Tensor & self, const Tensor & other) ;
  static Tensor __rshift__(const Tensor & self, Scalar other) ;
  static Tensor __rshift__(const Tensor & self, const Tensor & other) ;
  static Tensor __xor__(const Tensor & self, Scalar other) ;
  static Tensor __xor__(const Tensor & self, const Tensor & other) ;
  static Tensor _adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) ;
  static Tensor _adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self) ;
  static Tensor _addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) ;
  static Tensor & _addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) ;
  static Tensor & _addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) ;
  static Tensor _addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) ;
  static Tensor & _addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) ;
  static Tensor & _addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) ;
  static Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) ;
  static std::tuple<Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) ;
  static std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask) ;
  static Tensor _cast_Byte(const Tensor & self, bool non_blocking) ;
  static Tensor _cast_Char(const Tensor & self, bool non_blocking) ;
  static Tensor _cast_Double(const Tensor & self, bool non_blocking) ;
  static Tensor _cast_Float(const Tensor & self, bool non_blocking) ;
  static Tensor _cast_Half(const Tensor & self, bool non_blocking) ;
  static Tensor _cast_Int(const Tensor & self, bool non_blocking) ;
  static Tensor _cast_Long(const Tensor & self, bool non_blocking) ;
  static Tensor _cast_Short(const Tensor & self, bool non_blocking) ;
  static Tensor _cat(TensorList tensors, int64_t dim) ;
  static Tensor & _cat_out(Tensor & out, TensorList tensors, int64_t dim) ;
  static Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist) ;
  static Tensor _cholesky_helper(const Tensor & self, bool upper) ;
  static Tensor _cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper) ;
  static Tensor & _coalesced_(Tensor & self, bool coalesced) ;
  static Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) ;
  static std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) ;
  static Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) ;
  static Tensor _copy_from(const Tensor & self, const Tensor & dst, bool non_blocking) ;
  static std::tuple<Tensor,Tensor> _ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool zero_infinity) ;
  static Tensor _ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity) ;
  static std::tuple<Tensor,Tensor> _cudnn_ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool deterministic, bool zero_infinity) ;
  static Tensor _cudnn_init_dropout_state(double dropout, bool train, int64_t dropout_seed, const TensorOptions & options) ;
  static std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _cudnn_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state) ;
  static std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> _cudnn_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) ;
  static Tensor _cudnn_rnn_flatten_weight(TensorList weight_arr, int64_t weight_stride0, int64_t input_size, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, bool bidirectional) ;
  static void _cufft_clear_plan_cache(int64_t device_index) ;
  static int64_t _cufft_get_plan_cache_max_size(int64_t device_index) ;
  static int64_t _cufft_get_plan_cache_size(int64_t device_index) ;
  static void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size) ;
  static Tensor _cumprod(const Tensor & self, int64_t dim) ;
  static Tensor & _cumprod_out(Tensor & out, const Tensor & self, int64_t dim) ;
  static Tensor _cumsum(const Tensor & self, int64_t dim) ;
  static Tensor & _cumsum_out(Tensor & out, const Tensor & self, int64_t dim) ;
  static int64_t _debug_has_internal_overlap(const Tensor & self) ;
  static Tensor _dequantize_linear(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype) ;
  static int64_t _dimI(const Tensor & self) ;
  static int64_t _dimV(const Tensor & self) ;
  static Tensor _dim_arange(const Tensor & like, int64_t dim) ;
  static Tensor _dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total) ;
  static std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) ;
  static Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) ;
  static Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) ;
  static Tensor _embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode) ;
  static Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) ;
  static Tensor _empty_affine_quantized(IntArrayRef size, const TensorOptions & options, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format) ;
  static Tensor _empty_per_channel_affine_quantized_like(const Tensor & self, const Tensor & zero_points, IntArrayRef size, IntArrayRef axis, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) ;
  static Tensor _fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes) ;
  static std::tuple<Tensor,Tensor> _fused_dropout(const Tensor & self, double p, Generator * generator) ;
  static Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad) ;
  static bool _has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from) ;
  static Tensor & _index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) ;
  static Tensor & _index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate, bool unsafe) ;
  static Tensor _indices(const Tensor & self) ;
  static Tensor _inverse_helper(const Tensor & self) ;
  static Scalar _local_scalar_dense(const Tensor & self) ;
  static Tensor _log_softmax(const Tensor & self, int64_t dim, bool half_to_float) ;
  static Tensor _log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) ;
  static Tensor _lu_solve_helper(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) ;
  static std::tuple<Tensor,Tensor,Tensor> _lu_with_info(const Tensor & self, bool pivot, bool check_errors) ;
  static Tensor _masked_scale(const Tensor & self, const Tensor & mask, double scale) ;
  static std::tuple<Tensor,Tensor> _max(const Tensor & self, int64_t dim, bool keepdim) ;
  static std::tuple<Tensor &,Tensor &> _max_out(Tensor & max, Tensor & max_indices, const Tensor & self, int64_t dim, bool keepdim) ;
  static std::tuple<Tensor,Tensor> _min(const Tensor & self, int64_t dim, bool keepdim) ;
  static std::tuple<Tensor &,Tensor &> _min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) ;
  static Tensor _mkldnn_reshape(const Tensor & self, IntArrayRef shape) ;
  static Tensor _mkldnn_transpose(const Tensor & self, int64_t dim0, int64_t dim1) ;
  static Tensor & _mkldnn_transpose_(Tensor & self, int64_t dim0, int64_t dim1) ;
  static std::tuple<Tensor,Tensor> _mode(const Tensor & self, int64_t dim, bool keepdim) ;
  static std::tuple<Tensor &,Tensor &> _mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) ;
  static Tensor _multinomial_alias_draw(const Tensor & J, const Tensor & q, int64_t num_samples, Generator * generator) ;
  static std::tuple<Tensor,Tensor> _multinomial_alias_setup(const Tensor & probs) ;
  static bool _nnpack_available() ;
  static Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding) ;
  static std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask) ;
  static Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding) ;
  static Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding) ;
  static int64_t _nnz(const Tensor & self) ;
  static std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first) ;
  static Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first) ;
  static std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length) ;
  static Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist) ;
  static Tensor _pdist_forward(const Tensor & self, double p) ;
  static Tensor _per_channel_affine_qtensor(const Tensor & self, const Tensor & scale, const Tensor & zero_point, IntArrayRef axis) ;
  static Tensor _per_tensor_affine_qtensor(const Tensor & self, double scale, int64_t zero_point) ;
  static std::tuple<Tensor,Tensor> _qr_helper(const Tensor & self, bool some) ;
  static Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape) ;
  static Tensor _s_where(const Tensor & condition, const Tensor & self, const Tensor & other) ;
  static Tensor _sample_dirichlet(const Tensor & self, Generator * generator) ;
  static Tensor _shape_as_tensor(const Tensor & self) ;
  static std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) ;
  static Tensor & _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated) ;
  static Tensor & _sobol_engine_initialize_state_(Tensor & self, int64_t dimension) ;
  static Tensor & _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension) ;
  static Tensor _softmax(const Tensor & self, int64_t dim, bool half_to_float) ;
  static Tensor _softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) ;
  static std::tuple<Tensor,Tensor> _solve_helper(const Tensor & self, const Tensor & A) ;
  static Tensor & _sparse_add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) ;
  static Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta, Scalar alpha) ;
  static Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) ;
  static Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const TensorOptions & options) ;
  static Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, const TensorOptions & options) ;
  static Tensor & _sparse_dense_add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) ;
  static Tensor & _sparse_div_scalar_out(Tensor & out, const Tensor & self, Scalar other) ;
  static Tensor & _sparse_div_zerodim_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense) ;
  static Tensor & _sparse_mul_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor & _sparse_mul_scalar_out(Tensor & out, const Tensor & self, Scalar other) ;
  static Tensor & _sparse_mul_zerodim_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor _sparse_sum(const Tensor & self) ;
  static Tensor _sparse_sum(const Tensor & self, ScalarType dtype) ;
  static Tensor _sparse_sum(const Tensor & self, IntArrayRef dim) ;
  static Tensor _sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype) ;
  static Tensor _sparse_sum_backward(const Tensor & grad, const Tensor & self, IntArrayRef dim) ;
  static Tensor _standard_gamma(const Tensor & self, Generator * generator) ;
  static Tensor _standard_gamma_grad(const Tensor & self, const Tensor & output) ;
  static Tensor _std(const Tensor & self, bool unbiased) ;
  static std::tuple<Tensor,Tensor,Tensor> _svd_helper(const Tensor & self, bool some, bool compute_uv) ;
  static std::tuple<Tensor,Tensor> _symeig_helper(const Tensor & self, bool eigenvectors, bool upper) ;
  static std::tuple<Tensor,Tensor> _thnn_fused_gru_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) ;
  static std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_gru_cell_backward(const Tensor & grad_hy, const Tensor & workspace, bool has_bias) ;
  static std::tuple<Tensor,Tensor,Tensor> _thnn_fused_lstm_cell(const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & cx, const Tensor & input_bias, const Tensor & hidden_bias) ;
  static std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_fused_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & cx, const Tensor & cy, const Tensor & workspace, bool has_bias) ;
  static std::tuple<Tensor,Tensor> _triangular_solve_helper(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) ;
  static Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim) ;
  static std::tuple<Tensor,Tensor> _unique(const Tensor & self, bool sorted, bool return_inverse) ;
  static std::tuple<Tensor,Tensor,Tensor> _unique2(const Tensor & self, bool sorted, bool return_inverse, bool return_counts) ;
  static Tensor _unsafe_view(const Tensor & self, IntArrayRef size) ;
  static Tensor _values(const Tensor & self) ;
  static Tensor _var(const Tensor & self, bool unbiased) ;
  static Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim) ;
  static std::tuple<Tensor,Tensor> _weight_norm_cuda_interface(const Tensor & v, const Tensor & g, int64_t dim) ;
  static std::tuple<Tensor,Tensor> _weight_norm_cuda_interface_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) ;
  static std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) ;
  static Tensor abs(const Tensor & self) ;
  static Tensor & abs_(Tensor & self) ;
  static Tensor & abs_out(Tensor & out, const Tensor & self) ;
  static Tensor acos(const Tensor & self) ;
  static Tensor & acos_(Tensor & self) ;
  static Tensor & acos_out(Tensor & out, const Tensor & self) ;
  static Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size) ;
  static Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) ;
  static Tensor & adaptive_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) ;
  static Tensor adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size) ;
  static Tensor adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self) ;
  static Tensor & adaptive_avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) ;
  static Tensor & adaptive_avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) ;
  static std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size) ;
  static std::tuple<Tensor,Tensor> adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size) ;
  static Tensor adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) ;
  static Tensor & adaptive_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) ;
  static std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) ;
  static std::tuple<Tensor,Tensor> adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size) ;
  static Tensor adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) ;
  static Tensor & adaptive_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) ;
  static std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) ;
  static Tensor add(const Tensor & self, const Tensor & other, Scalar alpha) ;
  static Tensor add(const Tensor & self, Scalar other, Scalar alpha) ;
  static Tensor & add_(Tensor & self, const Tensor & other, Scalar alpha) ;
  static Tensor & add_(Tensor & self, Scalar other, Scalar alpha) ;
  static Tensor & add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) ;
  static Tensor addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) ;
  static Tensor & addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) ;
  static Tensor & addbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) ;
  static Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) ;
  static Tensor & addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) ;
  static Tensor & addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) ;
  static Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) ;
  static Tensor & addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) ;
  static Tensor & addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) ;
  static Tensor addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) ;
  static Tensor & addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) ;
  static Tensor & addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) ;
  static Tensor addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) ;
  static Tensor & addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) ;
  static Tensor & addmv_out(Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) ;
  static Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) ;
  static Tensor & addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) ;
  static Tensor & addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) ;
  static Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size, bool align_corners) ;
  static Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size, bool align_corners) ;
  static Tensor alias(const Tensor & self) ;
  static Tensor all(const Tensor & self, int64_t dim, bool keepdim) ;
  static Tensor all(const Tensor & self) ;
  static Tensor & all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) ;
  static bool allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) ;
  static Tensor alpha_dropout(const Tensor & input, double p, bool train) ;
  static Tensor & alpha_dropout_(Tensor & self, double p, bool train) ;
  static Tensor any(const Tensor & self, int64_t dim, bool keepdim) ;
  static Tensor any(const Tensor & self) ;
  static Tensor & any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) ;
  static Tensor arange(Scalar end, const TensorOptions & options) ;
  static Tensor arange(Scalar start, Scalar end, const TensorOptions & options) ;
  static Tensor arange(Scalar start, Scalar end, Scalar step, const TensorOptions & options) ;
  static Tensor & arange_out(Tensor & out, Scalar end) ;
  static Tensor & arange_out(Tensor & out, Scalar start, Scalar end, Scalar step) ;
  static Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) ;
  static Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) ;
  static Tensor argsort(const Tensor & self, int64_t dim, bool descending) ;
  static Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) ;
  static Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) ;
  static Tensor asin(const Tensor & self) ;
  static Tensor & asin_(Tensor & self) ;
  static Tensor & asin_out(Tensor & out, const Tensor & self) ;
  static Tensor atan(const Tensor & self) ;
  static Tensor atan2(const Tensor & self, const Tensor & other) ;
  static Tensor & atan2_(Tensor & self, const Tensor & other) ;
  static Tensor & atan2_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor & atan_(Tensor & self) ;
  static Tensor & atan_out(Tensor & out, const Tensor & self) ;
  static Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) ;
  static Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) ;
  static Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) ;
  static Tensor & avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) ;
  static Tensor & avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) ;
  static Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) ;
  static Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) ;
  static Tensor & avg_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) ;
  static Tensor & avg_pool3d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) ;
  static void backward(const Tensor & self, const Tensor & gradient, bool keep_graph, bool create_graph) ;
  static Tensor baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) ;
  static Tensor & baddbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) ;
  static Tensor & baddbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) ;
  static Tensor bartlett_window(int64_t window_length, const TensorOptions & options) ;
  static Tensor bartlett_window(int64_t window_length, bool periodic, const TensorOptions & options) ;
  static Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) ;
  static Tensor batch_norm_backward_elemt(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & weight, const Tensor & mean_dy, const Tensor & mean_dy_xmu) ;
  static std::tuple<Tensor,Tensor,Tensor,Tensor> batch_norm_backward_reduce(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & invstd, bool input_g, bool weight_g, bool bias_g) ;
  static Tensor batch_norm_elemt(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & mean, const Tensor & invstd, double eps) ;
  static std::tuple<Tensor,Tensor> batch_norm_gather_stats(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, int64_t count) ;
  static std::tuple<Tensor,Tensor> batch_norm_gather_stats_with_counts(const Tensor & input, const Tensor & mean, const Tensor & invstd, const Tensor & running_mean, const Tensor & running_var, double momentum, double eps, IntArrayRef counts) ;
  static std::tuple<Tensor,Tensor> batch_norm_stats(const Tensor & input, double eps) ;
  static std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum) ;
  static Tensor bernoulli(const Tensor & self, Generator * generator) ;
  static Tensor bernoulli(const Tensor & self, double p, Generator * generator) ;
  static Tensor & bernoulli_(Tensor & self, const Tensor & p, Generator * generator) ;
  static Tensor & bernoulli_(Tensor & self, double p, Generator * generator) ;
  static Tensor & bernoulli_out(Tensor & out, const Tensor & self, Generator * generator) ;
  static Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias) ;
  static Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) ;
  static Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) ;
  static Tensor & binary_cross_entropy_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) ;
  static Tensor & binary_cross_entropy_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) ;
  static Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) ;
  static Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) ;
  static Tensor bincount(const Tensor & self, const Tensor & weights, int64_t minlength) ;
  static Tensor bitwise_not(const Tensor & self) ;
  static Tensor & bitwise_not_(Tensor & self) ;
  static Tensor & bitwise_not_out(Tensor & out, const Tensor & self) ;
  static Tensor blackman_window(int64_t window_length, const TensorOptions & options) ;
  static Tensor blackman_window(int64_t window_length, bool periodic, const TensorOptions & options) ;
  static Tensor bmm(const Tensor & self, const Tensor & mat2) ;
  static Tensor & bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2) ;
  static std::vector<Tensor> broadcast_tensors(TensorList tensors) ;
  static Tensor cartesian_prod(TensorList tensors) ;
  static Tensor cat(TensorList tensors, int64_t dim) ;
  static Tensor & cat_out(Tensor & out, TensorList tensors, int64_t dim) ;
  static Tensor & cauchy_(Tensor & self, double median, double sigma, Generator * generator) ;
  static Tensor cdist(const Tensor & x1, const Tensor & x2, double p) ;
  static Tensor ceil(const Tensor & self) ;
  static Tensor & ceil_(Tensor & self) ;
  static Tensor & ceil_out(Tensor & out, const Tensor & self) ;
  static Tensor celu(const Tensor & self, Scalar alpha) ;
  static Tensor & celu_(Tensor & self, Scalar alpha) ;
  static Tensor chain_matmul(TensorList matrices) ;
  static Tensor cholesky(const Tensor & self, bool upper) ;
  static Tensor cholesky_inverse(const Tensor & self, bool upper) ;
  static Tensor & cholesky_inverse_out(Tensor & out, const Tensor & self, bool upper) ;
  static Tensor & cholesky_out(Tensor & out, const Tensor & self, bool upper) ;
  static Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper) ;
  static Tensor & cholesky_solve_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper) ;
  static std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim) ;
  static Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) ;
  static Tensor & clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) ;
  static Tensor clamp_max(const Tensor & self, Scalar max) ;
  static Tensor & clamp_max_(Tensor & self, Scalar max) ;
  static Tensor & clamp_max_out(Tensor & out, const Tensor & self, Scalar max) ;
  static Tensor clamp_min(const Tensor & self, Scalar min) ;
  static Tensor & clamp_min_(Tensor & self, Scalar min) ;
  static Tensor & clamp_min_out(Tensor & out, const Tensor & self, Scalar min) ;
  static Tensor & clamp_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) ;
  static Tensor clone(const Tensor & self) ;
  static Tensor coalesce(const Tensor & self) ;
  static Tensor col2im(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) ;
  static Tensor col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) ;
  static Tensor & col2im_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) ;
  static Tensor & col2im_out(Tensor & out, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) ;
  static Tensor combinations(const Tensor & self, int64_t r, bool with_replacement) ;
  static Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value) ;
  static Tensor contiguous(const Tensor & self, MemoryFormat memory_format) ;
  static Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) ;
  static Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) ;
  static Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) ;
  static Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad) ;
  static std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad) ;
  static Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) ;
  static Tensor conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) ;
  static Tensor conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) ;
  static Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) ;
  static std::tuple<Tensor,Tensor,Tensor> convolution_backward_overrideable(const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask) ;
  static Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) ;
  static Tensor & copy_(Tensor & self, const Tensor & src, bool non_blocking) ;
  static Tensor & copy_sparse_to_sparse_(Tensor & self, const Tensor & src, bool non_blocking) ;
  static Tensor cos(const Tensor & self) ;
  static Tensor & cos_(Tensor & self) ;
  static Tensor & cos_out(Tensor & out, const Tensor & self) ;
  static Tensor cosh(const Tensor & self) ;
  static Tensor & cosh_(Tensor & self) ;
  static Tensor & cosh_out(Tensor & out, const Tensor & self) ;
  static Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) ;
  static Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps) ;
  static Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) ;
  static Tensor & cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) ;
  static Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) ;
  static Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) ;
  static Tensor cudnn_affine_grid_generator(const Tensor & theta, int64_t N, int64_t C, int64_t H, int64_t W) ;
  static Tensor cudnn_affine_grid_generator_backward(const Tensor & grad, int64_t N, int64_t C, int64_t H, int64_t W) ;
  static std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) ;
  static std::tuple<Tensor,Tensor,Tensor> cudnn_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) ;
  static Tensor cudnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) ;
  static Tensor cudnn_convolution_backward_bias(const Tensor & grad_output) ;
  static Tensor cudnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static Tensor cudnn_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static Tensor cudnn_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static std::tuple<Tensor,Tensor,Tensor> cudnn_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) ;
  static Tensor cudnn_convolution_transpose_backward_bias(const Tensor & grad_output) ;
  static Tensor cudnn_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static Tensor cudnn_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static Tensor cudnn_grid_sampler(const Tensor & self, const Tensor & grid) ;
  static std::tuple<Tensor,Tensor> cudnn_grid_sampler_backward(const Tensor & self, const Tensor & grid, const Tensor & grad_output) ;
  static bool cudnn_is_acceptable(const Tensor & self) ;
  static Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) ;
  static Tensor & cumprod_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) ;
  static Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) ;
  static Tensor & cumsum_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) ;
  static int64_t dense_dim(const Tensor & self) ;
  static Tensor dequantize(const Tensor & self) ;
  static Tensor det(const Tensor & self) ;
  static Tensor detach(const Tensor & self) ;
  static Tensor & detach_(Tensor & self) ;
  static Tensor diag(const Tensor & self, int64_t diagonal) ;
  static Tensor diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) ;
  static Tensor & diag_out(Tensor & out, const Tensor & self, int64_t diagonal) ;
  static Tensor diagflat(const Tensor & self, int64_t offset) ;
  static Tensor diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) ;
  static Tensor digamma(const Tensor & self) ;
  static Tensor & digamma_(Tensor & self) ;
  static Tensor & digamma_out(Tensor & out, const Tensor & self) ;
  static Tensor dist(const Tensor & self, const Tensor & other, Scalar p) ;
  static Tensor div(const Tensor & self, const Tensor & other) ;
  static Tensor div(const Tensor & self, Scalar other) ;
  static Tensor & div_(Tensor & self, const Tensor & other) ;
  static Tensor & div_(Tensor & self, Scalar other) ;
  static Tensor & div_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor dot(const Tensor & self, const Tensor & tensor) ;
  static Tensor & dot_out(Tensor & out, const Tensor & self, const Tensor & tensor) ;
  static Tensor dropout(const Tensor & input, double p, bool train) ;
  static Tensor & dropout_(Tensor & self, double p, bool train) ;
  static std::tuple<Tensor,Tensor> eig(const Tensor & self, bool eigenvectors) ;
  static std::tuple<Tensor &,Tensor &> eig_out(Tensor & e, Tensor & v, const Tensor & self, bool eigenvectors) ;
  static Tensor einsum(std::string equation, TensorList tensors) ;
  static Tensor elu(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) ;
  static Tensor & elu_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) ;
  static Tensor elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) ;
  static Tensor & elu_backward_out(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) ;
  static Tensor & elu_out(Tensor & out, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) ;
  static Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) ;
  static Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) ;
  static std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) ;
  static Tensor embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) ;
  static Tensor & embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type) ;
  static Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) ;
  static Tensor empty(IntArrayRef size, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) ;
  static Tensor empty_like(const Tensor & self) ;
  static Tensor empty_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) ;
  static Tensor & empty_out(Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format) ;
  static Tensor empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options) ;
  static Tensor eq(const Tensor & self, Scalar other) ;
  static Tensor eq(const Tensor & self, const Tensor & other) ;
  static Tensor & eq_(Tensor & self, Scalar other) ;
  static Tensor & eq_(Tensor & self, const Tensor & other) ;
  static Tensor & eq_out(Tensor & out, const Tensor & self, Scalar other) ;
  static Tensor & eq_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static bool equal(const Tensor & self, const Tensor & other) ;
  static Tensor erf(const Tensor & self) ;
  static Tensor & erf_(Tensor & self) ;
  static Tensor & erf_out(Tensor & out, const Tensor & self) ;
  static Tensor erfc(const Tensor & self) ;
  static Tensor & erfc_(Tensor & self) ;
  static Tensor & erfc_out(Tensor & out, const Tensor & self) ;
  static Tensor erfinv(const Tensor & self) ;
  static Tensor & erfinv_(Tensor & self) ;
  static Tensor & erfinv_out(Tensor & out, const Tensor & self) ;
  static Tensor exp(const Tensor & self) ;
  static Tensor & exp_(Tensor & self) ;
  static Tensor & exp_out(Tensor & out, const Tensor & self) ;
  static Tensor expand(const Tensor & self, IntArrayRef size, bool implicit) ;
  static Tensor expand_as(const Tensor & self, const Tensor & other) ;
  static Tensor expm1(const Tensor & self) ;
  static Tensor & expm1_(Tensor & self) ;
  static Tensor & expm1_out(Tensor & out, const Tensor & self) ;
  static Tensor & exponential_(Tensor & self, double lambd, Generator * generator) ;
  static Tensor eye(int64_t n, const TensorOptions & options) ;
  static Tensor eye(int64_t n, int64_t m, const TensorOptions & options) ;
  static Tensor & eye_out(Tensor & out, int64_t n) ;
  static Tensor & eye_out(Tensor & out, int64_t n, int64_t m) ;
  static Tensor fake_quantize_per_tensor_affine(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) ;
  static Tensor fake_quantize_per_tensor_affine_backward(const Tensor & grad, const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) ;
  static bool fbgemm_is_cpu_supported() ;
  static Tensor fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) ;
  static Tensor fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) ;
  static Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) ;
  static Tensor fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) ;
  static std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(const Tensor & input) ;
  static Tensor fbgemm_pack_gemm_matrix_fp16(const Tensor & input) ;
  static Tensor fbgemm_pack_quantized_matrix(const Tensor & input) ;
  static Tensor fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N) ;
  static Tensor feature_alpha_dropout(const Tensor & input, double p, bool train) ;
  static Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train) ;
  static Tensor feature_dropout(const Tensor & input, double p, bool train) ;
  static Tensor & feature_dropout_(Tensor & self, double p, bool train) ;
  static Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized) ;
  static Tensor & fill_(Tensor & self, Scalar value) ;
  static Tensor & fill_(Tensor & self, const Tensor & value) ;
  static Tensor & fill_diagonal_(Tensor & self, Scalar fill_value, bool wrap) ;
  static Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim) ;
  static Tensor flip(const Tensor & self, IntArrayRef dims) ;
  static Tensor floor(const Tensor & self) ;
  static Tensor & floor_(Tensor & self) ;
  static Tensor & floor_out(Tensor & out, const Tensor & self) ;
  static Tensor fmod(const Tensor & self, Scalar other) ;
  static Tensor fmod(const Tensor & self, const Tensor & other) ;
  static Tensor & fmod_(Tensor & self, Scalar other) ;
  static Tensor & fmod_(Tensor & self, const Tensor & other) ;
  static Tensor & fmod_out(Tensor & out, const Tensor & self, Scalar other) ;
  static Tensor & fmod_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor frac(const Tensor & self) ;
  static Tensor & frac_(Tensor & self) ;
  static Tensor & frac_out(Tensor & out, const Tensor & self) ;
  static std::tuple<Tensor,Tensor> fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) ;
  static Tensor fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) ;
  static Tensor & fractional_max_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) ;
  static std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) ;
  static std::tuple<Tensor,Tensor> fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) ;
  static Tensor fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) ;
  static Tensor & fractional_max_pool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) ;
  static std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) ;
  static Tensor frobenius_norm(const Tensor & self) ;
  static Tensor frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim) ;
  static Tensor & frobenius_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) ;
  static Tensor from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, const TensorOptions & options) ;
  static Tensor full(IntArrayRef size, Scalar fill_value, const TensorOptions & options) ;
  static Tensor full_like(const Tensor & self, Scalar fill_value) ;
  static Tensor full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options) ;
  static Tensor & full_out(Tensor & out, IntArrayRef size, Scalar fill_value) ;
  static Tensor gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) ;
  static Tensor & gather_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) ;
  static Tensor ge(const Tensor & self, Scalar other) ;
  static Tensor ge(const Tensor & self, const Tensor & other) ;
  static Tensor & ge_(Tensor & self, Scalar other) ;
  static Tensor & ge_(Tensor & self, const Tensor & other) ;
  static Tensor & ge_out(Tensor & out, const Tensor & self, Scalar other) ;
  static Tensor & ge_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor gelu(const Tensor & self) ;
  static Tensor gelu_backward(const Tensor & grad, const Tensor & self) ;
  static Tensor & geometric_(Tensor & self, double p, Generator * generator) ;
  static std::tuple<Tensor,Tensor> geqrf(const Tensor & self) ;
  static std::tuple<Tensor &,Tensor &> geqrf_out(Tensor & a, Tensor & tau, const Tensor & self) ;
  static Tensor ger(const Tensor & self, const Tensor & vec2) ;
  static Tensor & ger_out(Tensor & out, const Tensor & self, const Tensor & vec2) ;
  static Tensor glu(const Tensor & self, int64_t dim) ;
  static Tensor glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim) ;
  static Tensor & glu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim) ;
  static Tensor & glu_out(Tensor & out, const Tensor & self, int64_t dim) ;
  static Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) ;
  static Tensor grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) ;
  static std::tuple<Tensor,Tensor> grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) ;
  static Tensor grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) ;
  static std::tuple<Tensor,Tensor> grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) ;
  static Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled) ;
  static std::tuple<Tensor,Tensor> gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) ;
  static std::tuple<Tensor,Tensor> gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) ;
  static Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) ;
  static Tensor gt(const Tensor & self, Scalar other) ;
  static Tensor gt(const Tensor & self, const Tensor & other) ;
  static Tensor & gt_(Tensor & self, Scalar other) ;
  static Tensor & gt_(Tensor & self, const Tensor & other) ;
  static Tensor & gt_out(Tensor & out, const Tensor & self, Scalar other) ;
  static Tensor & gt_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor hamming_window(int64_t window_length, const TensorOptions & options) ;
  static Tensor hamming_window(int64_t window_length, bool periodic, const TensorOptions & options) ;
  static Tensor hamming_window(int64_t window_length, bool periodic, double alpha, const TensorOptions & options) ;
  static Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options) ;
  static Tensor hann_window(int64_t window_length, const TensorOptions & options) ;
  static Tensor hann_window(int64_t window_length, bool periodic, const TensorOptions & options) ;
  static Tensor hardshrink(const Tensor & self, Scalar lambd) ;
  static Tensor hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd) ;
  static Tensor hardtanh(const Tensor & self, Scalar min_val, Scalar max_val) ;
  static Tensor & hardtanh_(Tensor & self, Scalar min_val, Scalar max_val) ;
  static Tensor hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) ;
  static Tensor & hardtanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) ;
  static Tensor & hardtanh_out(Tensor & out, const Tensor & self, Scalar min_val, Scalar max_val) ;
  static Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction) ;
  static Tensor histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) ;
  static Tensor & histc_out(Tensor & out, const Tensor & self, int64_t bins, Scalar min, Scalar max) ;
  static Tensor hspmm(const Tensor & mat1, const Tensor & mat2) ;
  static Tensor & hspmm_out(Tensor & out, const Tensor & mat1, const Tensor & mat2) ;
  static Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized) ;
  static Tensor im2col(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) ;
  static Tensor im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) ;
  static Tensor & im2col_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) ;
  static Tensor & im2col_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) ;
  static Tensor index(const Tensor & self, TensorList indices) ;
  static Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) ;
  static Tensor & index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) ;
  static Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) ;
  static Tensor & index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) ;
  static Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) ;
  static Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) ;
  static Tensor & index_fill_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) ;
  static Tensor & index_fill_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) ;
  static Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate) ;
  static Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate) ;
  static Tensor index_select(const Tensor & self, int64_t dim, const Tensor & index) ;
  static Tensor & index_select_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index) ;
  static Tensor indices(const Tensor & self) ;
  static Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) ;
  static Tensor int_repr(const Tensor & self) ;
  static Tensor inverse(const Tensor & self) ;
  static Tensor & inverse_out(Tensor & out, const Tensor & self) ;
  static Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes) ;
  static bool is_coalesced(const Tensor & self) ;
  static bool is_complex(const Tensor & self) ;
  static bool is_distributed(const Tensor & self) ;
  static bool is_floating_point(const Tensor & self) ;
  static bool is_nonzero(const Tensor & self) ;
  static bool is_pinned(const Tensor & self) ;
  static bool is_same_size(const Tensor & self, const Tensor & other) ;
  static bool is_set_to(const Tensor & self, const Tensor & tensor) ;
  static bool is_signed(const Tensor & self) ;
  static Tensor isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) ;
  static Tensor isnan(const Tensor & self) ;
  static Scalar item(const Tensor & self) ;
  static Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim) ;
  static std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool keepdim) ;
  static Tensor l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor & l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor & l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable) ;
  static Tensor le(const Tensor & self, Scalar other) ;
  static Tensor le(const Tensor & self, const Tensor & other) ;
  static Tensor & le_(Tensor & self, Scalar other) ;
  static Tensor & le_(Tensor & self, const Tensor & other) ;
  static Tensor & le_out(Tensor & out, const Tensor & self, Scalar other) ;
  static Tensor & le_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor leaky_relu(const Tensor & self, Scalar negative_slope) ;
  static Tensor & leaky_relu_(Tensor & self, Scalar negative_slope) ;
  static Tensor leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope) ;
  static Tensor & leaky_relu_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar negative_slope) ;
  static Tensor & leaky_relu_out(Tensor & out, const Tensor & self, Scalar negative_slope) ;
  static Tensor lerp(const Tensor & self, const Tensor & end, Scalar weight) ;
  static Tensor lerp(const Tensor & self, const Tensor & end, const Tensor & weight) ;
  static Tensor & lerp_(Tensor & self, const Tensor & end, Scalar weight) ;
  static Tensor & lerp_(Tensor & self, const Tensor & end, const Tensor & weight) ;
  static Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight) ;
  static Tensor & lerp_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight) ;
  static Tensor lgamma(const Tensor & self) ;
  static Tensor & lgamma_(Tensor & self) ;
  static Tensor & lgamma_out(Tensor & out, const Tensor & self) ;
  static Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias) ;
  static Tensor linspace(Scalar start, Scalar end, int64_t steps, const TensorOptions & options) ;
  static Tensor & linspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps) ;
  static Tensor log(const Tensor & self) ;
  static Tensor log10(const Tensor & self) ;
  static Tensor & log10_(Tensor & self) ;
  static Tensor & log10_out(Tensor & out, const Tensor & self) ;
  static Tensor log1p(const Tensor & self) ;
  static Tensor & log1p_(Tensor & self) ;
  static Tensor & log1p_out(Tensor & out, const Tensor & self) ;
  static Tensor log2(const Tensor & self) ;
  static Tensor & log2_(Tensor & self) ;
  static Tensor & log2_out(Tensor & out, const Tensor & self) ;
  static Tensor & log_(Tensor & self) ;
  static Tensor & log_normal_(Tensor & self, double mean, double std, Generator * generator) ;
  static Tensor & log_out(Tensor & out, const Tensor & self) ;
  static Tensor log_sigmoid(const Tensor & self) ;
  static Tensor log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer) ;
  static Tensor & log_sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer) ;
  static std::tuple<Tensor,Tensor> log_sigmoid_forward(const Tensor & self) ;
  static std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out(Tensor & output, Tensor & buffer, const Tensor & self) ;
  static Tensor & log_sigmoid_out(Tensor & out, const Tensor & self) ;
  static Tensor log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) ;
  static Tensor logdet(const Tensor & self) ;
  static Tensor logical_not(const Tensor & self) ;
  static Tensor & logical_not_(Tensor & self) ;
  static Tensor & logical_not_out(Tensor & out, const Tensor & self) ;
  static Tensor logical_xor(const Tensor & self, const Tensor & other) ;
  static Tensor & logical_xor_(Tensor & self, const Tensor & other) ;
  static Tensor & logical_xor_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor logspace(Scalar start, Scalar end, int64_t steps, double base, const TensorOptions & options) ;
  static Tensor & logspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps, double base) ;
  static Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim) ;
  static Tensor & logsumexp_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) ;
  static std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) ;
  static std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) ;
  static std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) ;
  static std::tuple<Tensor,Tensor> lstsq(const Tensor & self, const Tensor & A) ;
  static std::tuple<Tensor &,Tensor &> lstsq_out(Tensor & X, Tensor & qr, const Tensor & self, const Tensor & A) ;
  static Tensor lt(const Tensor & self, Scalar other) ;
  static Tensor lt(const Tensor & self, const Tensor & other) ;
  static Tensor & lt_(Tensor & self, Scalar other) ;
  static Tensor & lt_(Tensor & self, const Tensor & other) ;
  static Tensor & lt_out(Tensor & out, const Tensor & self, Scalar other) ;
  static Tensor & lt_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) ;
  static Tensor & lu_solve_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) ;
  static Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) ;
  static Tensor masked_fill(const Tensor & self, const Tensor & mask, Scalar value) ;
  static Tensor masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value) ;
  static Tensor & masked_fill_(Tensor & self, const Tensor & mask, Scalar value) ;
  static Tensor & masked_fill_(Tensor & self, const Tensor & mask, const Tensor & value) ;
  static Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source) ;
  static Tensor & masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source) ;
  static Tensor masked_select(const Tensor & self, const Tensor & mask) ;
  static Tensor & masked_select_out(Tensor & out, const Tensor & self, const Tensor & mask) ;
  static Tensor matmul(const Tensor & self, const Tensor & other) ;
  static Tensor & matmul_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor matrix_power(const Tensor & self, int64_t n) ;
  static Tensor matrix_rank(const Tensor & self, double tol, bool symmetric) ;
  static Tensor matrix_rank(const Tensor & self, bool symmetric) ;
  static std::tuple<Tensor,Tensor> max(const Tensor & self, int64_t dim, bool keepdim) ;
  static Tensor max(const Tensor & self, const Tensor & other) ;
  static Tensor max(const Tensor & self) ;
  static std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim) ;
  static Tensor & max_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) ;
  static std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) ;
  static Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) ;
  static std::tuple<Tensor,Tensor> max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) ;
  static Tensor max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) ;
  static Tensor & max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) ;
  static std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) ;
  static Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) ;
  static std::tuple<Tensor,Tensor> max_pool3d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) ;
  static Tensor max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) ;
  static Tensor & max_pool3d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) ;
  static std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) ;
  static Tensor max_unpool2d(const Tensor & self, const Tensor & indices, IntArrayRef output_size) ;
  static Tensor max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) ;
  static Tensor & max_unpool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) ;
  static Tensor & max_unpool2d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size) ;
  static Tensor max_unpool3d(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) ;
  static Tensor max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) ;
  static Tensor & max_unpool3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) ;
  static Tensor & max_unpool3d_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) ;
  static Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim) ;
  static Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype) ;
  static Tensor mean(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) ;
  static Tensor & mean_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) ;
  static std::tuple<Tensor,Tensor> median(const Tensor & self, int64_t dim, bool keepdim) ;
  static Tensor median(const Tensor & self) ;
  static std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) ;
  static std::vector<Tensor> meshgrid(TensorList tensors) ;
  static std::tuple<Tensor,Tensor> min(const Tensor & self, int64_t dim, bool keepdim) ;
  static Tensor min(const Tensor & self, const Tensor & other) ;
  static Tensor min(const Tensor & self) ;
  static std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) ;
  static Tensor & min_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim) ;
  static std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double exponential_average_factor, double epsilon) ;
  static std::tuple<Tensor,Tensor,Tensor> miopen_batch_norm_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var, double epsilon) ;
  static Tensor miopen_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static std::tuple<Tensor,Tensor,Tensor> miopen_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) ;
  static Tensor miopen_convolution_backward_bias(const Tensor & grad_output) ;
  static Tensor miopen_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static Tensor miopen_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static Tensor miopen_convolution_transpose(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static std::tuple<Tensor,Tensor,Tensor> miopen_convolution_transpose_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) ;
  static Tensor miopen_convolution_transpose_backward_input(const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static Tensor miopen_convolution_transpose_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static Tensor miopen_depthwise_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static std::tuple<Tensor,Tensor,Tensor> miopen_depthwise_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) ;
  static Tensor miopen_depthwise_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static Tensor miopen_depthwise_convolution_backward_weight(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) ;
  static std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> miopen_rnn(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & hx, const Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state) ;
  static std::tuple<Tensor,Tensor,Tensor,std::vector<Tensor>> miopen_rnn_backward(const Tensor & input, TensorList weight, int64_t weight_stride0, const Tensor & weight_buf, const Tensor & hx, const Tensor & cx, const Tensor & output, const Tensor & grad_output, const Tensor & grad_hy, const Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, IntArrayRef batch_sizes, const Tensor & dropout_state, const Tensor & reserve, std::array<bool,4> output_mask) ;
  static Tensor mkldnn_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) ;
  static Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) ;
  static std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask) ;
  static Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) ;
  static std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) ;
  static Tensor mkldnn_linear(const Tensor & input, const Tensor & weight, const Tensor & bias) ;
  static Tensor mkldnn_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) ;
  static Tensor mkldnn_reorder_conv2d_weight(const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) ;
  static Tensor mm(const Tensor & self, const Tensor & mat2) ;
  static Tensor & mm_out(Tensor & out, const Tensor & self, const Tensor & mat2) ;
  static std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim, bool keepdim) ;
  static std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) ;
  static Tensor mse_loss(const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor & mse_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor & mse_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor mul(const Tensor & self, const Tensor & other) ;
  static Tensor mul(const Tensor & self, Scalar other) ;
  static Tensor & mul_(Tensor & self, const Tensor & other) ;
  static Tensor & mul_(Tensor & self, Scalar other) ;
  static Tensor & mul_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) ;
  static Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) ;
  static Tensor & multi_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) ;
  static Tensor & multi_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) ;
  static Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) ;
  static Tensor & multilabel_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) ;
  static std::tuple<Tensor,Tensor> multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) ;
  static std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor & multilabel_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) ;
  static Tensor & multinomial_out(Tensor & out, const Tensor & self, int64_t num_samples, bool replacement, Generator * generator) ;
  static Tensor mv(const Tensor & self, const Tensor & vec) ;
  static Tensor & mv_out(Tensor & out, const Tensor & self, const Tensor & vec) ;
  static Tensor mvlgamma(const Tensor & self, int64_t p) ;
  static Tensor & mvlgamma_(Tensor & self, int64_t p) ;
  static Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length) ;
  static Tensor narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length) ;
  static std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) ;
  static std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) ;
  static std::tuple<Tensor,Tensor,Tensor> native_layer_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t M, int64_t N, double eps) ;
  static std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask) ;
  static std::tuple<Tensor,Tensor,Tensor> native_layer_norm_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask) ;
  static Tensor native_norm(const Tensor & self, Scalar p) ;
  static Tensor ne(const Tensor & self, Scalar other) ;
  static Tensor ne(const Tensor & self, const Tensor & other) ;
  static Tensor & ne_(Tensor & self, Scalar other) ;
  static Tensor & ne_(Tensor & self, const Tensor & other) ;
  static Tensor & ne_out(Tensor & out, const Tensor & self, Scalar other) ;
  static Tensor & ne_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor neg(const Tensor & self) ;
  static Tensor & neg_(Tensor & self) ;
  static Tensor & neg_out(Tensor & out, const Tensor & self) ;
  static Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) ;
  static Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) ;
  static Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) ;
  static Tensor & nll_loss2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) ;
  static std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) ;
  static std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) ;
  static Tensor & nll_loss2d_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) ;
  static Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) ;
  static Tensor & nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) ;
  static std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) ;
  static std::tuple<Tensor &,Tensor &> nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) ;
  static Tensor & nll_loss_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) ;
  static Tensor nonzero(const Tensor & self) ;
  static std::vector<Tensor> nonzero_numpy(const Tensor & self) ;
  static Tensor & nonzero_out(Tensor & out, const Tensor & self) ;
  static Tensor norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) ;
  static Tensor norm(const Tensor & self, Scalar p) ;
  static Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) ;
  static Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) ;
  static Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim) ;
  static Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) ;
  static Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) ;
  static Tensor normal(const Tensor & mean, double std, Generator * generator) ;
  static Tensor normal(double mean, const Tensor & std, Generator * generator) ;
  static Tensor normal(const Tensor & mean, const Tensor & std, Generator * generator) ;
  static Tensor normal(double mean, double std, IntArrayRef size, Generator * generator, const TensorOptions & options) ;
  static Tensor & normal_(Tensor & self, double mean, double std, Generator * generator) ;
  static Tensor & normal_out(Tensor & out, const Tensor & mean, double std, Generator * generator) ;
  static Tensor & normal_out(Tensor & out, double mean, const Tensor & std, Generator * generator) ;
  static Tensor & normal_out(Tensor & out, const Tensor & mean, const Tensor & std, Generator * generator) ;
  static Tensor & normal_out(Tensor & out, double mean, double std, IntArrayRef size, Generator * generator) ;
  static Tensor nuclear_norm(const Tensor & self, bool keepdim) ;
  static Tensor nuclear_norm(const Tensor & self, IntArrayRef dim, bool keepdim) ;
  static Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, bool keepdim) ;
  static Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) ;
  static int64_t numel(const Tensor & self) ;
  static Tensor numpy_T(const Tensor & self) ;
  static Tensor one_hot(const Tensor & self, int64_t num_classes) ;
  static Tensor ones(IntArrayRef size, const TensorOptions & options) ;
  static Tensor ones_like(const Tensor & self) ;
  static Tensor ones_like(const Tensor & self, const TensorOptions & options) ;
  static Tensor & ones_out(Tensor & out, IntArrayRef size) ;
  static Tensor orgqr(const Tensor & self, const Tensor & input2) ;
  static Tensor & orgqr_out(Tensor & out, const Tensor & self, const Tensor & input2) ;
  static Tensor ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) ;
  static Tensor & ormqr_out(Tensor & out, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) ;
  static Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim) ;
  static Tensor pdist(const Tensor & self, double p) ;
  static Tensor permute(const Tensor & self, IntArrayRef dims) ;
  static Tensor pin_memory(const Tensor & self) ;
  static Tensor pinverse(const Tensor & self, double rcond) ;
  static Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor) ;
  static Tensor poisson(const Tensor & self, Generator * generator) ;
  static Tensor poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction) ;
  static Tensor polygamma(int64_t n, const Tensor & self) ;
  static Tensor & polygamma_(Tensor & self, int64_t n) ;
  static Tensor & polygamma_out(Tensor & out, int64_t n, const Tensor & self) ;
  static Tensor pow(const Tensor & self, Scalar exponent) ;
  static Tensor pow(const Tensor & self, const Tensor & exponent) ;
  static Tensor pow(Scalar self, const Tensor & exponent) ;
  static Tensor & pow_(Tensor & self, Scalar exponent) ;
  static Tensor & pow_(Tensor & self, const Tensor & exponent) ;
  static Tensor & pow_out(Tensor & out, const Tensor & self, Scalar exponent) ;
  static Tensor & pow_out(Tensor & out, const Tensor & self, const Tensor & exponent) ;
  static Tensor & pow_out(Tensor & out, Scalar self, const Tensor & exponent) ;
  static Tensor prelu(const Tensor & self, const Tensor & weight) ;
  static std::tuple<Tensor,Tensor> prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight) ;
  static Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype) ;
  static Tensor prod(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) ;
  static Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) ;
  static Tensor & put_(Tensor & self, const Tensor & index, const Tensor & source, bool accumulate) ;
  static Tensor q_per_channel_scales(const Tensor & self) ;
  static Tensor q_per_channel_zero_points(const Tensor & self) ;
  static double q_scale(const Tensor & self) ;
  static int64_t q_zero_point(const Tensor & self) ;
  static std::tuple<Tensor,Tensor> qr(const Tensor & self, bool some) ;
  static std::tuple<Tensor &,Tensor &> qr_out(Tensor & Q, Tensor & R, const Tensor & self, bool some) ;
  static QScheme qscheme(const Tensor & self) ;
  static Tensor quantize_linear(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype) ;
  static Tensor quantize_linear_per_channel(const Tensor & self, const Tensor & scales, const Tensor & zero_points, IntArrayRef axis, ScalarType dtype) ;
  static std::tuple<Tensor,Tensor> quantized_gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) ;
  static std::tuple<Tensor,Tensor> quantized_gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) ;
  static Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) ;
  static std::tuple<Tensor,Tensor,Tensor> quantized_lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, c10::optional<ScalarType> dtype) ;
  static std::tuple<Tensor,Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) ;
  static Tensor quantized_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) ;
  static Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) ;
  static Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) ;
  static Tensor rand(IntArrayRef size, const TensorOptions & options) ;
  static Tensor rand(IntArrayRef size, Generator * generator, const TensorOptions & options) ;
  static Tensor rand_like(const Tensor & self) ;
  static Tensor rand_like(const Tensor & self, const TensorOptions & options) ;
  static Tensor & rand_out(Tensor & out, IntArrayRef size) ;
  static Tensor & rand_out(Tensor & out, IntArrayRef size, Generator * generator) ;
  static Tensor randint(int64_t high, IntArrayRef size, const TensorOptions & options) ;
  static Tensor randint(int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) ;
  static Tensor randint(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options) ;
  static Tensor randint(int64_t low, int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) ;
  static Tensor randint_like(const Tensor & self, int64_t high) ;
  static Tensor randint_like(const Tensor & self, int64_t low, int64_t high) ;
  static Tensor randint_like(const Tensor & self, int64_t high, const TensorOptions & options) ;
  static Tensor randint_like(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options) ;
  static Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size) ;
  static Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size, Generator * generator) ;
  static Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size) ;
  static Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, Generator * generator) ;
  static Tensor randn(IntArrayRef size, const TensorOptions & options) ;
  static Tensor randn(IntArrayRef size, Generator * generator, const TensorOptions & options) ;
  static Tensor randn_like(const Tensor & self) ;
  static Tensor randn_like(const Tensor & self, const TensorOptions & options) ;
  static Tensor & randn_out(Tensor & out, IntArrayRef size) ;
  static Tensor & randn_out(Tensor & out, IntArrayRef size, Generator * generator) ;
  static Tensor & random_(Tensor & self, int64_t from, int64_t to, Generator * generator) ;
  static Tensor & random_(Tensor & self, int64_t to, Generator * generator) ;
  static Tensor & random_(Tensor & self, Generator * generator) ;
  static Tensor randperm(int64_t n, const TensorOptions & options) ;
  static Tensor randperm(int64_t n, Generator * generator, const TensorOptions & options) ;
  static Tensor & randperm_out(Tensor & out, int64_t n) ;
  static Tensor & randperm_out(Tensor & out, int64_t n, Generator * generator) ;
  static Tensor range(Scalar start, Scalar end, Scalar step, const TensorOptions & options) ;
  static Tensor range(Scalar start, Scalar end, const TensorOptions & options) ;
  static Tensor & range_out(Tensor & out, Scalar start, Scalar end, Scalar step) ;
  static Tensor reciprocal(const Tensor & self) ;
  static Tensor & reciprocal_(Tensor & self) ;
  static Tensor & reciprocal_out(Tensor & out, const Tensor & self) ;
  static Tensor reflection_pad1d(const Tensor & self, IntArrayRef padding) ;
  static Tensor reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) ;
  static Tensor & reflection_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) ;
  static Tensor & reflection_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) ;
  static Tensor reflection_pad2d(const Tensor & self, IntArrayRef padding) ;
  static Tensor reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) ;
  static Tensor & reflection_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) ;
  static Tensor & reflection_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) ;
  static Tensor relu(const Tensor & self) ;
  static Tensor & relu_(Tensor & self) ;
  static Tensor remainder(const Tensor & self, Scalar other) ;
  static Tensor remainder(const Tensor & self, const Tensor & other) ;
  static Tensor & remainder_(Tensor & self, Scalar other) ;
  static Tensor & remainder_(Tensor & self, const Tensor & other) ;
  static Tensor & remainder_out(Tensor & out, const Tensor & self, Scalar other) ;
  static Tensor & remainder_out(Tensor & out, const Tensor & self, const Tensor & other) ;
  static Tensor renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) ;
  static Tensor & renorm_(Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) ;
  static Tensor & renorm_out(Tensor & out, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) ;
  static Tensor repeat(const Tensor & self, IntArrayRef repeats) ;
  static Tensor repeat_interleave(const Tensor & repeats) ;
  static Tensor repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) ;
  static Tensor repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) ;
  static Tensor replication_pad1d(const Tensor & self, IntArrayRef padding) ;
  static Tensor replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) ;
  static Tensor & replication_pad1d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) ;
  static Tensor & replication_pad1d_out(Tensor & out, const Tensor & self, IntArrayRef padding) ;
  static Tensor replication_pad2d(const Tensor & self, IntArrayRef padding) ;
  static Tensor replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) ;
  static Tensor & replication_pad2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) ;
  static Tensor & replication_pad2d_out(Tensor & out, const Tensor & self, IntArrayRef padding) ;
  static Tensor replication_pad3d(const Tensor & self, IntArrayRef padding) ;
  static Tensor replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) ;
  static Tensor & replication_pad3d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) ;
  static Tensor & replication_pad3d_out(Tensor & out, const Tensor & self, IntArrayRef padding) ;
  static Tensor reshape(const Tensor & self, IntArrayRef shape) ;
  static Tensor reshape_as(const Tensor & self, const Tensor & other) ;
  static Tensor & resize_(Tensor & self, IntArrayRef size) ;
  static Tensor & resize_as_(Tensor & self, const Tensor & the_template) ;
  static Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) ;
  static std::tuple<Tensor,Tensor> rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) ;
  static std::tuple<Tensor,Tensor> rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) ;
  static Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) ;
  static std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) ;
  static std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) ;
  static Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) ;
  static Tensor roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims) ;
  static Tensor rot90(const Tensor & self, int64_t k, IntArrayRef dims) ;
  static Tensor round(const Tensor & self) ;
  static Tensor & round_(Tensor & self) ;
  static Tensor & round_out(Tensor & out, const Tensor & self) ;
  static Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) ;
  static Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) ;
  static Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) ;
  static Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) ;
  static Tensor rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) ;
  static Tensor & rrelu_with_noise_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) ;
  static Tensor & rrelu_with_noise_out(Tensor & out, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator * generator) ;
  static Tensor rsqrt(const Tensor & self) ;
  static Tensor & rsqrt_(Tensor & self) ;
  static Tensor & rsqrt_out(Tensor & out, const Tensor & self) ;
  static Tensor rsub(const Tensor & self, const Tensor & other, Scalar alpha) ;
  static Tensor rsub(const Tensor & self, Scalar other, Scalar alpha) ;
  static Tensor s_native_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) ;
  static Tensor & s_native_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) ;
  static Tensor & s_native_addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) ;
  static Tensor scalar_tensor(Scalar s, const TensorOptions & options) ;
  static Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) ;
  static Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) ;
  static Tensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) ;
  static Tensor & scatter_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) ;
  static Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) ;
  static Tensor & scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) ;
  static Tensor select(const Tensor & self, int64_t dim, int64_t index) ;
  static Tensor selu(const Tensor & self) ;
  static Tensor & selu_(Tensor & self) ;
  static Tensor & set_(Tensor & self, Storage source) ;
  static Tensor & set_(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) ;
  static Tensor & set_(Tensor & self, const Tensor & source) ;
  static Tensor & set_(Tensor & self) ;
  static void set_data(const Tensor & self, const Tensor & new_data) ;
  static Tensor & set_quantizer_(Tensor & self, ConstQuantizerPtr quantizer) ;
  static Tensor sigmoid(const Tensor & self) ;
  static Tensor & sigmoid_(Tensor & self) ;
  static Tensor sigmoid_backward(const Tensor & grad_output, const Tensor & output) ;
  static Tensor & sigmoid_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) ;
  static Tensor & sigmoid_out(Tensor & out, const Tensor & self) ;
  static Tensor sign(const Tensor & self) ;
  static Tensor & sign_(Tensor & self) ;
  static Tensor & sign_out(Tensor & out, const Tensor & self) ;
  static Tensor sin(const Tensor & self) ;
  static Tensor & sin_(Tensor & self) ;
  static Tensor & sin_out(Tensor & out, const Tensor & self) ;
  static Tensor sinh(const Tensor & self) ;
  static Tensor & sinh_(Tensor & self) ;
  static Tensor & sinh_out(Tensor & out, const Tensor & self) ;
  static int64_t size(const Tensor & self, int64_t dim) ;
  static Tensor slice(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) ;
  static std::tuple<Tensor,Tensor> slogdet(const Tensor & self) ;
  static Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) ;
  static std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask) ;
  static Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) ;
  static std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask) ;
  static Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) ;
  static std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) ;
  static std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) ;
  static Tensor & slow_conv_transpose2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) ;
  static Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) ;
  static std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) ;
  static std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input) ;
  static Tensor & slow_conv_transpose3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) ;
  static Tensor smm(const Tensor & self, const Tensor & mat2) ;
  static Tensor smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor & smooth_l1_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor & smooth_l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor & soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor & soft_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) ;
  static Tensor softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) ;
  static Tensor softplus(const Tensor & self, Scalar beta, Scalar threshold) ;
  static Tensor softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) ;
  static Tensor & softplus_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) ;
  static Tensor & softplus_out(Tensor & out, const Tensor & self, Scalar beta, Scalar threshold) ;
  static Tensor softshrink(const Tensor & self, Scalar lambd) ;
  static Tensor softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) ;
  static Tensor & softshrink_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd) ;
  static Tensor & softshrink_out(Tensor & out, const Tensor & self, Scalar lambd) ;
  static std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A) ;
  static std::tuple<Tensor &,Tensor &> solve_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A) ;
  static std::tuple<Tensor,Tensor> sort(const Tensor & self, int64_t dim, bool descending) ;
  static std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) ;
  static Tensor sparse_coo_tensor(IntArrayRef size, const TensorOptions & options) ;
  static Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, const TensorOptions & options) ;
  static Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) ;
  static int64_t sparse_dim(const Tensor & self) ;
  static Tensor sparse_mask(const Tensor & self, const Tensor & mask) ;
  static Tensor & sparse_resize_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) ;
  static Tensor & sparse_resize_and_clear_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) ;
  static std::vector<Tensor> split(const Tensor & self, int64_t split_size, int64_t dim) ;
  static std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim) ;
  static Tensor sqrt(const Tensor & self) ;
  static Tensor & sqrt_(Tensor & self) ;
  static Tensor & sqrt_out(Tensor & out, const Tensor & self) ;
  static Tensor squeeze(const Tensor & self) ;
  static Tensor squeeze(const Tensor & self, int64_t dim) ;
  static Tensor & squeeze_(Tensor & self) ;
  static Tensor & squeeze_(Tensor & self, int64_t dim) ;
  static Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) ;
  static Tensor & sspaddmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) ;
  static Tensor stack(TensorList tensors, int64_t dim) ;
  static Tensor & stack_out(Tensor & out, TensorList tensors, int64_t dim) ;
  static Tensor std(const Tensor & self, bool unbiased) ;
  static Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) ;
  static std::tuple<Tensor,Tensor> std_mean(const Tensor & self, bool unbiased) ;
  static std::tuple<Tensor,Tensor> std_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) ;
  static Tensor & std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) ;
  static Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided) ;
  static int64_t stride(const Tensor & self, int64_t dim) ;
  static Tensor sub(const Tensor & self, const Tensor & other, Scalar alpha) ;
  static Tensor sub(const Tensor & self, Scalar other, Scalar alpha) ;
  static Tensor & sub_(Tensor & self, const Tensor & other, Scalar alpha) ;
  static Tensor & sub_(Tensor & self, Scalar other, Scalar alpha) ;
  static Tensor & sub_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) ;
  static Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype) ;
  static Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) ;
  static Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) ;
  static Tensor sum_to_size(const Tensor & self, IntArrayRef size) ;
  static std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some, bool compute_uv) ;
  static std::tuple<Tensor &,Tensor &,Tensor &> svd_out(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some, bool compute_uv) ;
  static std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors, bool upper) ;
  static std::tuple<Tensor &,Tensor &> symeig_out(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors, bool upper) ;
  static Tensor t(const Tensor & self) ;
  static Tensor & t_(Tensor & self) ;
  static Tensor take(const Tensor & self, const Tensor & index) ;
  static Tensor & take_out(Tensor & out, const Tensor & self, const Tensor & index) ;
  static Tensor tan(const Tensor & self) ;
  static Tensor & tan_(Tensor & self) ;
  static Tensor & tan_out(Tensor & out, const Tensor & self) ;
  static Tensor tanh(const Tensor & self) ;
  static Tensor & tanh_(Tensor & self) ;
  static Tensor tanh_backward(const Tensor & grad_output, const Tensor & output) ;
  static Tensor & tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) ;
  static Tensor & tanh_out(Tensor & out, const Tensor & self) ;
  static Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other) ;
  static Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) ;
  static std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) ;
  static std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) ;
  static std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) ;
  static std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) ;
  static Tensor & thnn_conv2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) ;
  static Tensor thnn_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) ;
  static std::tuple<Tensor,Tensor,Tensor> thnn_conv3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) ;
  static std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv3d_backward_out(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) ;
  static std::tuple<Tensor,Tensor,Tensor> thnn_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) ;
  static std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv3d_forward_out(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) ;
  static Tensor & thnn_conv3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) ;
  static Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) ;
  static std::tuple<Tensor,Tensor> thnn_conv_depthwise2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,2> output_mask) ;
  static std::tuple<Tensor &,Tensor &> thnn_conv_depthwise2d_backward_out(Tensor & grad_input, Tensor & grad_weight, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) ;
  static Tensor thnn_conv_depthwise2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) ;
  static Tensor & thnn_conv_depthwise2d_forward_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) ;
  static Tensor & thnn_conv_depthwise2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) ;
  static Tensor threshold(const Tensor & self, Scalar threshold, Scalar value) ;
  static Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value) ;
  static Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold) ;
  static Tensor & threshold_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value) ;
  static Tensor to(const Tensor & self, const TensorOptions & options, bool non_blocking, bool copy) ;
  static Tensor to(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy) ;
  static Tensor to(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy) ;
  static Tensor to(const Tensor & self, const Tensor & other, bool non_blocking, bool copy) ;
  static Tensor to_dense(const Tensor & self) ;
  static Tensor to_dense_backward(const Tensor & grad, const Tensor & input) ;
  static Tensor to_mkldnn(const Tensor & self) ;
  static Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input) ;
  static Tensor to_sparse(const Tensor & self, int64_t sparse_dim) ;
  static Tensor to_sparse(const Tensor & self) ;
  static std::tuple<Tensor,Tensor> topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) ;
  static std::tuple<Tensor &,Tensor &> topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) ;
  static Tensor trace(const Tensor & self) ;
  static Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1) ;
  static Tensor & transpose_(Tensor & self, int64_t dim0, int64_t dim1) ;
  static Tensor trapz(const Tensor & y, const Tensor & x, int64_t dim) ;
  static Tensor trapz(const Tensor & y, double dx, int64_t dim) ;
  static std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) ;
  static std::tuple<Tensor &,Tensor &> triangular_solve_out(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) ;
  static Tensor tril(const Tensor & self, int64_t diagonal) ;
  static Tensor & tril_(Tensor & self, int64_t diagonal) ;
  static Tensor tril_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) ;
  static Tensor & tril_out(Tensor & out, const Tensor & self, int64_t diagonal) ;
  static Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) ;
  static Tensor triu(const Tensor & self, int64_t diagonal) ;
  static Tensor & triu_(Tensor & self, int64_t diagonal) ;
  static Tensor triu_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) ;
  static Tensor & triu_out(Tensor & out, const Tensor & self, int64_t diagonal) ;
  static Tensor trunc(const Tensor & self) ;
  static Tensor & trunc_(Tensor & self) ;
  static Tensor & trunc_out(Tensor & out, const Tensor & self) ;
  static Tensor type_as(const Tensor & self, const Tensor & other) ;
  static std::vector<Tensor> unbind(const Tensor & self, int64_t dim) ;
  static Tensor unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step) ;
  static Tensor & uniform_(Tensor & self, double from, double to, Generator * generator) ;
  static std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) ;
  static std::tuple<Tensor,Tensor,Tensor> unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) ;
  static std::tuple<Tensor,Tensor,Tensor> unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse, bool return_counts) ;
  static Tensor unsqueeze(const Tensor & self, int64_t dim) ;
  static Tensor & unsqueeze_(Tensor & self, int64_t dim) ;
  static Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners) ;
  static Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) ;
  static Tensor & upsample_bicubic2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) ;
  static Tensor & upsample_bicubic2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) ;
  static Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners) ;
  static Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) ;
  static Tensor & upsample_bilinear2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) ;
  static Tensor & upsample_bilinear2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) ;
  static Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners) ;
  static Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) ;
  static Tensor & upsample_linear1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) ;
  static Tensor & upsample_linear1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) ;
  static Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size) ;
  static Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) ;
  static Tensor & upsample_nearest1d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) ;
  static Tensor & upsample_nearest1d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) ;
  static Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size) ;
  static Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) ;
  static Tensor & upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) ;
  static Tensor & upsample_nearest2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) ;
  static Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size) ;
  static Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) ;
  static Tensor & upsample_nearest3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) ;
  static Tensor & upsample_nearest3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) ;
  static Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners) ;
  static Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) ;
  static Tensor & upsample_trilinear3d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners) ;
  static Tensor & upsample_trilinear3d_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners) ;
  static Tensor values(const Tensor & self) ;
  static Tensor var(const Tensor & self, bool unbiased) ;
  static Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) ;
  static std::tuple<Tensor,Tensor> var_mean(const Tensor & self, bool unbiased) ;
  static std::tuple<Tensor,Tensor> var_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) ;
  static Tensor & var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) ;
  static Tensor view(const Tensor & self, IntArrayRef size) ;
  static Tensor view_as(const Tensor & self, const Tensor & other) ;
  static Tensor where(const Tensor & condition, const Tensor & self, const Tensor & other) ;
  static std::vector<Tensor> where(const Tensor & condition) ;
  static Tensor & zero_(Tensor & self) ;
  static Tensor zeros(IntArrayRef size, const TensorOptions & options) ;
  static Tensor zeros_like(const Tensor & self) ;
  static Tensor zeros_like(const Tensor & self, const TensorOptions & options) ;
  static Tensor & zeros_out(Tensor & out, IntArrayRef size) ;

private:
  // checks that t is actually a Variable
  static const Variable & checked_cast_variable(const Tensor & t, const char * name, int pos);
  static Variable & checked_cast_variable(Tensor & t, const char * name, int pos);
  static at::Tensor & unpack(Tensor & t, const char * name, int pos);
  static const at::Tensor & unpack(const Tensor & t, const char * name, int pos);
  static at::Tensor unpack_opt(const Tensor & t, const char * name, int pos);
  static std::vector<at::Tensor> unpack(at::TensorList tl, const char *name, int pos);
};

}} // namespace torch::autograd
